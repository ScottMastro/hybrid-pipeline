#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 12 19:52:43 2019

@author: scott
"""

#!/usr/bin/env python2
"""Plot concordance of read alignments to a genome"""

from __future__ import division
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sb
import gzip
from Bio import SeqIO
from collections import Counter

# Enum for CIGAR operations (pysam convention)
MATCH, INS, DEL = 0, 1, 2
SHOW_MATCH_WARNING = False
REF_SKIP, SOFT_CLIP, HARD_CLIP = 3, 4, 5
PAD, EQUAL, DIFF = 6, 7, 8

# Groups of related CIGAR operations
QUERYOPS = (MATCH, EQUAL, DIFF, INS) # operations that include query bases
REFOPS = (MATCH, EQUAL, DIFF, DEL)   # operations that include reference bases
CLIPPINGOPS = (HARD_CLIP, SOFT_CLIP) # operations that clip query bases

CHROM_COL = "#chrom"
POS_COL = "pos"
TOTAL_COL = "alignmentCount"
DISCORD_COL = "diffCount"
DIFF_COL = "substitutionCount"
DEL_COL = "deletionCount"
INS_COL = "insertionCount"
DOM_COL = "dominantType"
PC_DISCORD_COL = "differenceProportion"
PC_DOM_COL = "dominantProportion"

colourMap = {DIFF:'green', INS:'blue', DEL:'red', None:'black'}


def read_fasta(fasta):
    if(fasta[-2:] == "gz"):
        with gzip.open(fasta, "rb") as handle:
            records = list(SeqIO.parse(handle, "fasta"))
    else:
        records = list(SeqIO.parse(fasta, "fasta"))
        
    return dict(zip([str(r.id) for r in records], [str(r.seq) for r in records]))

def read_data(path):
    return pd.read_csv(path, sep=",", header=0)

def add_columns(df):
    
    df[DOM_COL] = None
    df[PC_DISCORD_COL] = df[DISCORD_COL] / df[TOTAL_COL]
    df[PC_DOM_COL] = df[[DIFF_COL, DEL_COL, INS_COL]].max(axis = 1) / (df[DISCORD_COL])

    def update(g, g2, g3, value): 
        df.loc[(df[g] > df[g2]) & (df[g] > df[g3]), DOM_COL] = value

    update(DIFF_COL,  DEL_COL, INS_COL, DIFF)
    update( INS_COL, DIFF_COL, DEL_COL, DEL)
    update( DEL_COL, DIFF_COL, INS_COL, INS)
    
    return df

def plot_confusion(df):
    
    covDf = df[df[TOTAL_COL] <= 50]
    
    sb.pairplot(covDf[[DIFF_COL, DEL_COL, INS_COL]],
                plot_kws={'alpha':0.1})    

def plot_discorant_hist(df, minDepth=10, maxDepth=100, minDiscordance=0, bins=50):
    
    a, b = 0.4, bins
    percentFilter=0.9  
    subDf = df[(df[TOTAL_COL] > minDepth) & (df[TOTAL_COL] < maxDepth) &  \
               (df[PC_DISCORD_COL] > minDiscordance)] 
    
    fig, axs = plt.subplots(3, sharey=True, gridspec_kw={"hspace": 0})
    
    def filterGroup(g, pc=0): 
        return subDf.loc[(subDf[DOM_COL] == g) & (subDf[PC_DOM_COL] >= pc), PC_DISCORD_COL]

    axs[0].set(title="Discordance Histogram")
    axs[-1].set(xlabel="Percent Discordance")

    axs[0].hist(filterGroup(DIFF), color=colourMap[DIFF], label="DIFF", alpha=a, bins=b)
    axs[0].hist(filterGroup(DIFF, percentFilter), color=colourMap[DIFF], label="DIFF_", alpha=a, bins=b)
    axs[0].set(ylabel="SUBSTUTION Frequency")

    axs[1].hist(filterGroup(DEL), color=colourMap[DEL], label="DEL", alpha=a, bins=b)
    axs[1].hist(filterGroup(DEL, percentFilter), color=colourMap[DEL], label="DEL_", alpha=a, bins=b)
    axs[1].set(ylabel="DELETION Frequency")

    axs[2].hist(filterGroup(INS), color="b", label=colourMap[INS], alpha=a, bins=b)
    axs[2].hist(filterGroup(INS, percentFilter), color=colourMap[INS], label="INS_", alpha=a, bins=b)
    axs[2].set(ylabel="INSERTION Frequency")

    fig.set_size_inches(8,12 , forward=True)
    fig.tight_layout()
    plt.show()
    
    
def position_distribution(df, nchrom=1, minDepth=10, maxDepth=100, minDiscordance=0):
    
    a = 0.1
    fig, axs = plt.subplots(1, nchrom, sharey=True, gridspec_kw={'wspace': 0})
    if nchrom == 1: axs = [axs]
    
    subDf = df[(df[TOTAL_COL] > minDepth) & (df[TOTAL_COL] < maxDepth) &  \
               (df[PC_DISCORD_COL] > minDiscordance)]

    
    def filterChrom(chromId): 
        return subDf[(subDf[CHROM_COL] == chromId)]
    
    for i,ax in enumerate(axs):
        ax.set(title="Contig " + str(i))

        chromDf = filterChrom(i)
        ax.scatter(chromDf[POS_COL], chromDf[PC_DISCORD_COL], alpha=a, \
                   c=chromDf[DOM_COL].apply(lambda x: colourMap[x]))  #colour by type
                   #c=chromDf[TOTAL_COL]) #colour by depth


    fig.set_size_inches(26,16 , forward=True)
    fig.tight_layout()
    plt.show()

def position_distribution2(df, chromId=0, start=0, end=6e6, minDiscordance=0.9):
    
    a = 0.3
    fig, axs = plt.subplots(3, sharex=True, gridspec_kw={"hspace": 0})    
    subDf = df[(df[CHROM_COL] == chromId) & 
             (df[POS_COL] >= start) & (df[POS_COL] <= end) &
                     (df[PC_DISCORD_COL] > minDiscordance)]
    
    def filterGroup(g): 
        return subDf[(subDf[DOM_COL] == g)]
    
    axs[0].set(title="Contig " + str(chromId))
    
    diffDf = filterGroup(DIFF)
    delDf = filterGroup(DEL)
    insDf = filterGroup(INS)

    axs[0].scatter(diffDf[POS_COL], diffDf[PC_DISCORD_COL],  color=colourMap[DIFF], label="DIFF", alpha=a)
    axs[1].scatter(delDf[POS_COL], delDf[PC_DISCORD_COL],  color=colourMap[DEL], label="DEL", alpha=a)
    axs[2].scatter(insDf[POS_COL], insDf[PC_DISCORD_COL],  color=colourMap[INS], label="INS", alpha=a)


    fig.set_size_inches(36,4 , forward=True)
    fig.tight_layout()
    plt.show()


def position_distribution3(df, chromId=0, window=100):
    
    a = 0.3
    subDf = df[(df[CHROM_COL] == chromId)]
    end = subDf[POS_COL].max()
    def count(start): 
        return subDf[(subDf[POS_COL] >= start) & (subDf[POS_COL] < start+window)].shape[0]
    
    y = [count(start) for start in range(0, 10000000, window)]
    x = [start for start in range(0, 10000000, window)]

    plt.scatter(x, y, alpha=a)

    fig, axs = plt.subplots(3, sharex=True, gridspec_kw={"hspace": 0})    
    
    def filterGroup(g): 
        return subDf[(subDf[DOM_COL] == g)]
    
    axs[0].set(title="Contig " + str(chromId))
    
    diffDf = filterGroup(DIFF)
    delDf = filterGroup(DEL)
    insDf = filterGroup(INS)

    axs[0].scatter(diffDf[POS_COL], diffDf[PC_DISCORD_COL],  color=colourMap[DIFF], label="DIFF", alpha=a)
    axs[1].scatter(delDf[POS_COL], delDf[PC_DISCORD_COL],  color=colourMap[DEL], label="DEL", alpha=a)
    axs[2].scatter(insDf[POS_COL], insDf[PC_DISCORD_COL],  color=colourMap[INS], label="INS", alpha=a)


    fig.set_size_inches(36,4 , forward=True)
    fig.tight_layout()
    plt.show()
    

def source_analysis(df, source):
    
    chrom="hybrid_0"
    
    def get_source(chrom, pos):
        return source[chrom][pos-1].upper()

    positions = np.array(df[POS_COL])
    sources = [get_source(chrom, pos) for pos in positions]
    letter_counts = Counter(sources)
    df = pd.DataFrame.from_dict(letter_counts, orient='index')
    df.plot(kind='bar')



DIR = "/media/scott/Rotom/assembly_data/hg002/"
GENOME_CSV = DIR + "genome_concordance_10x.csv"
SOURCE_FA = DIR + "hybrid_source.fa"
df = read_data(GENOME_CSV)
df = add_columns(df)


source = read_fasta(SOURCE_FA)
