import glob
import os

ENV_FILE=config["env"]
ENV_SDA_FILE=config["env_sda"]

shell.prefix("source "+ENV_FILE+" ; ")

include: "Snakefile_irods"

def add_slash(string): 
    if len(string) == 0: return "./"
    return string + ("" if string.endswith("/") else "/")

HYBRIDDIR = add_slash(config["hybrid"])
REF_READS_DIR = add_slash(config["rreads"])
QUERY_READS_DIR = add_slash(config["qreads"])

localrules: all, prep_assembly

rule all:
    input:
        HYBRIDDIR+"sda/sda.done",
        HYBRIDDIR+"hybrid_assembly.longranger.bam",
        HYBRIDDIR+"hybrid_assembly.pbmm2.bam"
    resources: mem=4

###############################################
# ALIGN READS TO HYBRID
###############################################

rule prep_assembly:
    input:
        assembly=HYBRIDDIR+"hybrid_assembly.fasta.gz",
        leftovers=HYBRIDDIR+"hybrid_assembly_leftover.fasta.gz"
    output:
        temp("{dir}/hybrid_assembly.fasta")
    resources: mem=4
    shell: "zcat {input.assembly} {input.leftovers} > {output}"

rule faidx:
    input:"{prefix}.fasta"
    output:"{prefix}.fasta.fai"
    resources: mem=4
    shell: "samtools faidx {input}"

rule align_pbmm2:
    input:
        fasta="{dir}/hybrid_assembly.fasta",
        reads=REF_READS_DIR+"{readid}.bam"
    output:
        bam=temp("{dir}/part_{readid}.bam"),
        bai=temp("{dir}/part_{readid}.bam.bai")
    resources: mem=84
    threads:16
    shell:
        """
        tempbam={wildcards.dir}/temp.{wildcards.readid}.bam
        pbmm2 align --sort -j 16 {input.fasta} {input.reads} $tempbam
        # Reheader BAM to be compliant with PB BAM standards
        samtools view -H $tempbam | sed "s/SO:coordinate/pb:3.0.4\tSO:coordinate/" | \
           samtools reheader - $tempbam > {output.bam}
        rm $tempbam
        rm ${{tempbam}}.bai
        samtools index {output.bam}
        """

def get_longread_ids():
    return glob_wildcards(REF_READS_DIR+"{readid}.bam{ext}").readid

rule merge_pbmm2:
    input: expand("{{dir}}/part_{readid}.bam", readid=get_longread_ids())
    output: 
        bam="{dir}/hybrid_assembly.pbmm2.bam",
        bai="{dir}/hybrid_assembly.pbmm2.bam.bai"
    resources: mem=8
    shell: "samtools merge {output.bam} {input} ; samtools index {output.bam}"

SDA_CLUSTER='''"sbatch -N 1 -c {{threads}} --tmp 100G --mem {{resources.mem}}G -t 16:00:00 -o {wildcards.dir}/sda/jobout/slurm-%j.out -e {wildcards.dir}/sda/jobout/slurm-%j.out --job-name sda_task"'''
rule sda_denovo:
    input: 
        fasta="{dir}/hybrid_assembly.fasta",
        fai="{dir}/hybrid_assembly.fasta.fai",
        bam="{dir}/hybrid_assembly.pbmm2.bam",
    output:
        sda="{dir}/sda/sda.done"
    resources: mem=8
    shell: 
        """
	source """+ENV_SDA_FILE+"""
        mkdir -p {wildcards.dir}/sda ; mkdir -p {wildcards.dir}/sda/jobout
        $SDA denovo --unlock --rerun-incomplete --ref {input.fasta} --input {input.bam} --dir {wildcards.dir}/sda 
        $SDA denovo --latency-wait 300 --rerun-incomplete --ref {input.fasta} --input {input.bam} --dir {wildcards.dir}/sda -t 120 --cluster \
        """ + SDA_CLUSTER

rule longranger_mkref:
    input: HYBRIDDIR+"hybrid_assembly.fasta"
    output:
        ref=directory("{dir}/refdata-hybrid_assembly"),
        fa="{dir}/refdata-hybrid_assembly/fasta/genome.fa",
        dict="{dir}/refdata-hybrid_assembly/fasta/genome.dict"
    resources:
        mem=16
    shell:
      	"""
      	cwd=`pwd` ; cd {wildcards.dir}
      	rm -r refdata-hybrid_assembly ; longranger mkref {input}
      	cd $cwd
      	$PICARD CreateSequenceDictionary R={output.fa} O={output.dict}
      	touch {output.ref} ; touch {output.ref}/* ; touch {output.ref}/*/*
        """

def get_linkedread_ids():
    localfiles = glob_wildcards(QUERY_READS_DIR+"{readid}.fastq.gz").readid
    remotefiles = glob_wildcards(QUERY_READS_DIR+"{readid}.fastq.gz.irods").readid
    allfiles = list(set(localfiles + remotefiles))
    return [QUERY_READS_DIR + x + ".fastq.gz" for x in allfiles]

rule align_longranger:
    input:
        mkref="{dir}/refdata-hybrid_assembly",
        reads=get_linkedread_ids()
    output:
        bam="{dir}/hybrid_assembly.longranger.bam",
        bai="{dir}/hybrid_assembly.longranger.bam.bai",
        summmary="{dir}/hybrid_assembly.longranger.csv"

    threads:32
    resources: mem=121
    shell:
        """
        touch {input.mkref} ; touch {input.mkref}/* ; touch {input.mkref}/*/*

        mkdir -p {wildcards.dir}/10x_reads ; ln -sf """+QUERY_READS_DIR+"""*.f*q.gz {wildcards.dir}/10x_reads/
        cwd=`pwd` ; cd {wildcards.dir}
        longranger align --id=lr --fastqs=10x_reads --reference refdata-hybrid_assembly \
          --jobmode=local --localcores=16 --localmem={resources.mem} 
        rm -r 10x_reads
        cd $cwd
        mv {wildcards.dir}/lr/outs/*possorted_bam.bam {output.bam} 
        mv {wildcards.dir}/lr/outs/*possorted_bam.bam.bai {output.bai}
        mv {wildcards.dir}/lr/outs/summary.csv {output.summmary}
        rm -r {wildcards.dir}/lr
        """

