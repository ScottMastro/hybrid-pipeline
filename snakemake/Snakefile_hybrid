import glob
import os

ENV_FILE=config["env"]
shell.prefix("source "+ENV_FILE+" ; ")

def add_slash(string): 
    if len(string) == 0: return "./"
    return string + ("" if string.endswith("/") else "/")

OUTDIR = add_slash(config["out"]) if "out" in config else "./hybrid/"
if not os.path.exists(OUTDIR):
    os.mkdir(OUTDIR)

PIPELINEDIR = config["scripts"]
UNITIGS = config["unitigs"] if "unitigs" in config else None



# BLOCK CONSTRUCTION
# -----------
REF_FASTA = config["r"]
QUERY_FASTA = config["q"]

os.environ['REF_FASTA'] = str(REF_FASTA)
os.environ['QUERY_FASTA'] = str(QUERY_FASTA)
    
include: "Snakefile_hybrid_blocks"
# -----------

localrules: all, gunzip_ref, gunzip_query, gunzip_blocks

rule all:
    input: 
        assembly=OUTDIR+"hybrid_assembly.fasta", 
        leftover=OUTDIR+"hybrid_assembly_leftover.fasta",
        source=OUTDIR+"hybrid_source.fasta",
	purger=REF_FASTA+".purged.fa",
	purgehapr=REF_FASTA+".hap.fa",
	purgeq=QUERY_FASTA+".purged.fa",
	purgehapq=QUERY_FASTA+".hap.fa",
	blocks=OUTDIR+"blastn.summary.txt"
    resources: mem=4
    shell:
        """
        rm -rf """+OUTDIR+"""block
        bgzip {input.assembly} ; bgzip {input.leftover} ; bgzip {input.source}
        bgzip {input.purger} ; bgzip {input.purgehapr}
        bgzip {input.purgeq} ; bgzip {input.purgehapq}
        bgzip {input.blocks}
        """        
rule gunzip_ref:
    input: ancient(REF_FASTA+".purged.fa.gz"),
    output: temp(REF_FASTA+".purged.fa"),
    resources: mem=4
    shell: "gunzip -c {input} > {output}"

rule gunzip_query:
    input: ancient(QUERY_FASTA+".purged.fa.gz")
    output: temp(QUERY_FASTA+".purged.fa"),
    resources: mem=4
    shell: "gunzip -c {input} > {output}" 

rule gunzip_blocks:
    input: ancient(OUTDIR+"blastn.summary.txt.gz")
    output: temp(OUTDIR+"blastn.summary.txt"),
    resources: mem=4
    shell: "gunzip -c {input} > {output}"

###############################################
# RUN HYBRID
###############################################

rule clean_unitig:
    input:  "{prefix}"
    output: "{prefix}.clean.bed"
    resources: mem=4
    shell: "python "+ PIPELINEDIR +"scripts/clean_bed.py {input} {output}"
        
rule run_hybrid:
    resources: mem=84
    input:
        query=ancient(QUERY_FASTA+".purged.fa"),
        ref=ancient(REF_FASTA+".purged.fa"),
        unitigs=ancient(UNITIGS+".clean.bed"),
        blocks=ancient("{dir}blastn.summary.txt")
    output:
        assembly="{dir}hybrid_assembly.fasta",
	leftover="{dir}hybrid_assembly_leftover.fasta",
	source="{dir}hybrid_source.fasta"
    shell:
        "echo 'python "+ PIPELINEDIR +"src/pipeline.py hybrid --confident {input.unitigs} -o {wildcards.dir} {input.blocks} {input.query} {input.ref}' ; \
        python "+ PIPELINEDIR +"src/pipeline.py hybrid --confident {input.unitigs} -o {wildcards.dir} {input.blocks} {input.query} {input.ref} "
